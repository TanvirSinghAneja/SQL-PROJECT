-- EXPLORATORY DATA ANALYSIS

SELECT *
FROM LAYOFFS_USE;

-- MAXIMUM LAID OFF 
SELECT MAX(TOTAL_LAID_OFF)
FROM LAYOFFS_USE;

-- COMPANIES THAT LOST ALL THERE WORKFORCE, ORDERED BY NUMBER OF PEOPLE LAID OFF
SELECT * 
FROM LAYOFFS_USE
WHERE PERCENTAGE_LAID_OFF=1
ORDER BY TOTAL_LAID_OFF DESC;

-- WHICH COMPANIES LAID OFF THE MOST
SELECT COMPANY, SUM(TOTAL_LAID_OFF)
FROM LAYOFFS_USE
GROUP BY COMPANY
ORDER BY 2 DESC;

-- FUNDS RAISED BY COMPANY AND THE NUMBER THEY LAID OFF
SELECT COMPANY,SUM(TOTAL_LAID_OFF),SUM(FUNDS_RAISED_MILLIONS)
FROM layoffs_staging2
GROUP BY COMPANY
ORDER BY 3 DESC;

-- THE START AND END DATE OF THE DATASET
SELECT MIN(`DATE`),MAX(`DATE`)
FROM LAYOFFS_USE;

-- WHICH INDUSTRY SAW THE HIGHEST LAID OFFS
SELECT INDUSTRY,SUM(TOTAL_LAID_OFF)
FROM LAYOFFS_USE
GROUP BY INDUSTRY
ORDER BY 2 DESC;

-- WHICH COUNTRY FACED THE HIGHEST LAID OFFS
SELECT COUNTRY,SUM(TOTAL_LAID_OFF)
FROM LAYOFFS_USE
GROUP BY COUNTRY
ORDER BY 2 DESC;

-- YEARLY BREAK UP OF LAYOFFS
SELECT YEAR(`DATE`),SUM(TOTAL_LAID_OFF)
FROM LAYOFFS_USE
GROUP BY YEAR(`DATE`)
ORDER BY 2 DESC;

-- WHAT STAGE WERE THE COMPANY WHICH LAID OFF
SELECT STAGE,SUM(TOTAL_LAID_OFF)
FROM LAYOFFS_USE
GROUP BY STAGE
ORDER BY 2 DESC;

-- CALCULATING THE ROLLING TOTAL MONTH WISE
SELECT SUBSTRING(`DATE`,1,7) AS `MONTH` ,SUM(TOTAL_LAID_OFF)
FROM LAYOFFS_USE
WHERE SUBSTRING(`DATE`,1,7) IS NOT NULL
GROUP BY `MONTH`
ORDER BY 1 ASC;

WITH ROLLING_TOTAL AS
(SELECT SUBSTRING(`DATE`,1,7) AS `MONTH` ,
SUM(TOTAL_LAID_OFF) AS TOTAL_LAID
FROM LAYOFFS_USE
WHERE SUBSTRING(`DATE`,1,7) IS NOT NULL
GROUP BY `MONTH`
ORDER BY 1 ASC)
SELECT `MONTH`, TOTAL_LAID,
SUM(TOTAL_LAID) OVER(ORDER BY `MONTH`) AS ROLLING_TOTAL
FROM ROLLING_TOTAL;

-- YEAR WISE COMPANY LAYOFFS
SELECT COMPANY,YEAR(`DATE`),SUM(TOTAL_LAID_OFF)
FROM LAYOFFS_USE
group by COMPANY,YEAR(`DATE`)
ORDER BY 3 DESC;

-- RANKING COMPANIES IN A YEAR BASED ON THE NUMBER THEY LAID OFF IN A YEAR
WITH COMPANY_YEAR(COMPANY,YEARS,TOTAL_LAID_OFF) AS
(SELECT COMPANY,YEAR(`DATE`),SUM(TOTAL_LAID_OFF)
FROM LAYOFFS_USE
group by COMPANY,YEAR(`DATE`)),
COMPANY_YEAR_RANK AS
(SELECT *, 
dense_rank() OVER(partition by YEARS ORDER BY TOTAL_LAID_OFF DESC) AS RANKING
FROM COMPANY_YEAR
WHERE YEARS IS NOT NULL)
SELECT *
FROM COMPANY_YEAR_RANK
WHERE RANKING<=5;
